const express = require("express")
const {AddBookInStore,GetAllBookInBookStore,deleteBookInStore,updateBookInStoreDetails} = require("../controller/book_controller")
const upload = require("../middleware/upload_middleware")
const router = express.Router()
/**
 * @swagger
 * components:
 *   schemas:
 *     bookStore:
 *       type: object
 *       required:
 *         - BookId
 *         - NameofBook
 *         - BookPrice
 *         - BookAuthor
 *         - BookSummary
 *         - BookISBNNumber
 *         - DateofPublication
 *         - Booklanguage
 *         - Numberofpages
 *         - BookCategory
 *         - BookImage
 *       properties:
 *         BookId:
 *           type: integer
 *           description: AutoGenerated
 *         NameofBook:
 *           type: string
 *           description: NameofBook
 *         BookPrice:
 *           type: integer
 *           description: BookPrice
 *         BookAuthor:
 *           type: string
 *           description: BookAuthor
 *         BookSummary:
 *           type: string
 *           description: BookSummary
 *         BookISBNNumber:
 *           type: integer
 *           description: BookISBNNumber
 *         DateofPublication:
 *           type: string
 *           description: DateofPublication
 *         Booklanguage:
 *           type: string
 *           description: Booklanguage
 *         Numberofpages:
 *           type: integer
 *           description: Numberofpages
 *         BookCategory:
 *           type: string
 *           description: BookImage
 *         BookImage:
 *           type: string
 *           description: BookImage
 *       example:
 *         BookId : Autogenerated
 *         NameofBook : YAYATI
 *         BookPrice : 652
 *         BookAuthor : V.S Khandekar
 *         BookSummary : Yayati is a 1959 Marathi-language mythological novel by Indian writer V. S. Khandekar. One of Khandekar's best-known works, it retells the story of the mythical Hindu king
 *         BookISBNNumber : 4676
 *         DateofPublication : 1959
 *         Booklanguage : Marathi-language
 *         Numberofpages : 432
 *         BookCategory : novel
 *         BookImage : BookImage
 *        
 *
 */

/**
 * @swagger
 * /api/v1/GetAllBookInBookStore:
 *   get:
 *     summary: get all GetAllBookInBookStore
 *     tags: [bookStore]
 *     responses:
 *       200:
 *         description: get All GetAllBookInBookStore
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               items:
 *                 $ref: '#/components/schemas/bookStore'
 */
router.route("/GetAllBookInBookStore").get(GetAllBookInBookStore)


/**
 * @swagger
 * /api/v1/AddBookInStore:
 *   post:
 *     summary: create a new AddBookInStore
 *     tags: [bookStore]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/bookStore'
 *     responses:
 *       200:
 *         description: AddBookInStore create successfull
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/bookStore'
 *       500:
 *         description: Some server error
 */
 router.route("/AddBookInStore").post(upload.single('BookImage'),AddBookInStore)
/**
 * @swagger
 * /api/v1/updateBookInStoreDetails:
 *   post:
 *     summary: update updateBookInStoreDetails 
 *     tags: [bookStore]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/bookStore'
 *     responses:
 *       200:
 *         description: updateBookInStoreDetails update successfull
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/bookStore'
 *       500:
 *         description: Some server error
 */
 router.route("/updateBookInStoreDetails").post(updateBookInStoreDetails)
/**
 * @swagger
 * /api/v1/deleteBookInStore/{BookId}:
 *   delete:
 *     summary: Delete an deleteBookInStore
 *     tags: [bookStore]
 *     parameters:
 *         - in: path
 *           name: BookId
 *           required: true
 *           description: BookId is required
 *           schema:
 *              type: string
 *     responses:
 *       200:
 *         description: deleteBookInStore delete successfully
 *   
 */
 router.route("/deleteBookInStore/:BookId").delete(deleteBookInStore)

module.exports = router

